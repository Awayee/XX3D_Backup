#pragma once

namespace Engine {
    enum RFormat {
        FORMAT_UNDEFINED,
        FORMAT_R8_UNORM,
        FORMAT_R8_SNORM,
        FORMAT_R8_UINT,
        FORMAT_R8_SINT,
        FORMAT_R8G8_UNORM,
        FORMAT_R8G8_SNORM,
        FORMAT_R8G8_UINT,
        FORMAT_R8G8_SINT,
        FORMAT_R8G8B8A8_UNORM,
        FORMAT_R8G8B8A8_SNORM,
        FORMAT_R8G8B8A8_UINT,
        FORMAT_R8G8B8A8_SINT,
        FORMAT_R8G8B8A8_SRGB,
        FORMAT_B8G8R8A8_UNORM,
        FORMAT_B8G8R8A8_SRGB,
        FORMAT_R16_UNORM,
        FORMAT_R16_SNORM,
        FORMAT_R16_UINT,
        FORMAT_R16_SINT,
        FORMAT_R16_SFLOAT,
        FORMAT_R16G16_UNORM,
        FORMAT_R16G16_SNORM,
        FORMAT_R16G16_UINT,
        FORMAT_R16G16_SINT,
        FORMAT_R16G16_SFLOAT,
        FORMAT_R16G16B16A16_UNORM,
        FORMAT_R16G16B16A16_SNORM,
        FORMAT_R16G16B16A16_UINT,
        FORMAT_R16G16B16A16_SINT,
        FORMAT_R16G16B16A16_SFLOAT,
        FORMAT_R32_UINT,
        FORMAT_R32_SINT,
        FORMAT_R32_SFLOAT,
        FORMAT_R32G32_UINT,
        FORMAT_R32G32_SINT,
        FORMAT_R32G32_SFLOAT,
        FORMAT_R32G32B32_UINT,
        FORMAT_R32G32B32_SINT,
        FORMAT_R32G32B32_SFLOAT,
        FORMAT_R32G32B32A32_UINT,
        FORMAT_R32G32B32A32_SINT,
        FORMAT_R32G32B32A32_SFLOAT,
        FORMAT_D16_UNORM,
    	FORMAT_D24_UNORM_S8_UINT,
        FORMAT_D32_SFLOAT,
        FORMAT_MAX_ENUM
    };

    enum RImageLayout {
        IMAGE_LAYOUT_UNDEFINED,
        IMAGE_LAYOUT_GENERAL,
        IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,
        IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL,
        IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL,
        IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
        IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,
        IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,
        IMAGE_LAYOUT_PREINITIALIZED,
        IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
        IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
        IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL,
        IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL,
        IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL,
        IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL,
        IMAGE_LAYOUT_PRESENT_SRC_KHR,
        IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT,
        IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR,
        IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR,
        IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR,
        IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR,
        IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV,
        IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR,
        IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR,
        IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR,
        IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR,
        IMAGE_LAYOUT_MAX_ENUM
    };

    enum RAttachmentType {
        ATTACHMENT_COLOR,
        ATTACHMENT_DEPTH
    };

    enum RAttachmentLoadOp {
        ATTACHMENT_LOAD_OP_LOAD = 0,
        ATTACHMENT_LOAD_OP_CLEAR = 1,
        ATTACHMENT_LOAD_OP_DONT_CARE = 2,
        ATTACHMENT_LOAD_OP_MAX_ENUM = 0x7FFFFFFF
    };

    enum RAttachmentStoreOp {
        ATTACHMENT_STORE_OP_STORE = 0,
        ATTACHMENT_STORE_OP_DONT_CARE = 1,
        ATTACHMENT_STORE_OP_NONE_QCOM = 1000301000,
        ATTACHMENT_STORE_OP_MAX_ENUM = 0x7FFFFFFF
    };

    enum RCommandBufferLevel {
        COMMAND_BUFFER_LEVEL_PRIMARY = 0,
        COMMAND_BUFFER_LEVEL_SECONDARY = 1,
        COMMAND_BUFFER_LEVEL_MAX_ENUM = 0x7FFFFFFF
    };

    enum RCommandBufferUsageFlagsBit {
        COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 0x00000001,
        COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 0x00000002,
        COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 0x00000004,
        COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    };
    typedef unsigned int RCommandBufferUsageFlags;

    enum RPipelineStageFlagBits {
        PIPELINE_STAGE_TOP_OF_PIPE_BIT = 0x00000001,
        PIPELINE_STAGE_DRAW_INDIRECT_BIT = 0x00000002,
        PIPELINE_STAGE_VERTEX_INPUT_BIT = 0x00000004,
        PIPELINE_STAGE_VERTEX_SHADER_BIT = 0x00000008,
        PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 0x00000010,
        PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 0x00000020,
        PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 0x00000040,
        PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 0x00000080,
        PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 0x00000100,
        PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 0x00000200,
        PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 0x00000400,
        PIPELINE_STAGE_COMPUTE_SHADER_BIT = 0x00000800,
        PIPELINE_STAGE_TRANSFER_BIT = 0x00001000,
        PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 0x00002000,
        PIPELINE_STAGE_HOST_BIT = 0x00004000,
        PIPELINE_STAGE_ALL_GRAPHICS_BIT = 0x00008000,
        PIPELINE_STAGE_ALL_COMMANDS_BIT = 0x00010000,
        PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 0x01000000,
        PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 0x00040000,
        PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 0x02000000,
        PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 0x00200000,
        PIPELINE_STAGE_TASK_SHADER_BIT_NV = 0x00080000,
        PIPELINE_STAGE_MESH_SHADER_BIT_NV = 0x00100000,
        PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 0x00800000,
        PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0x00400000,
        PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 0x00020000,
        PIPELINE_STAGE_NONE_KHR = 0,
        PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
        PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR,
        PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR,
        PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    };
    typedef unsigned int RPipelineStageFlags;

    enum RAccessFlagBits {
        ACCESS_INDIRECT_COMMAND_READ_BIT = 0x00000001,
        ACCESS_INDEX_READ_BIT = 0x00000002,
        ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 0x00000004,
        ACCESS_UNIFORM_READ_BIT = 0x00000008,
        ACCESS_INPUT_ATTACHMENT_READ_BIT = 0x00000010,
        ACCESS_SHADER_READ_BIT = 0x00000020,
        ACCESS_SHADER_WRITE_BIT = 0x00000040,
        ACCESS_COLOR_ATTACHMENT_READ_BIT = 0x00000080,
        ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 0x00000100,
        ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0x00000200,
        ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0x00000400,
        ACCESS_TRANSFER_READ_BIT = 0x00000800,
        ACCESS_TRANSFER_WRITE_BIT = 0x00001000,
        ACCESS_HOST_READ_BIT = 0x00002000,
        ACCESS_HOST_WRITE_BIT = 0x00004000,
        ACCESS_MEMORY_READ_BIT = 0x00008000,
        ACCESS_MEMORY_WRITE_BIT = 0x00010000,
        ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 0x02000000,
        ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 0x04000000,
        ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 0x08000000,
        ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 0x00100000,
        ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 0x00080000,
        ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 0x00200000,
        ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 0x00400000,
        ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 0x00800000,
        ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 0x01000000,
        ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 0x00020000,
        ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 0x00040000,
        ACCESS_NONE_KHR = 0,
        ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR,
        ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR,
        ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV,
        ACCESS_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    };
    typedef unsigned int RAccessFlags;

    enum RDependencyFlagBits {
        DEPENDENCY_BY_REGION_BIT = 0x00000001,
        DEPENDENCY_DEVICE_GROUP_BIT = 0x00000004,
        DEPENDENCY_VIEW_LOCAL_BIT = 0x00000002,
        DEPENDENCY_VIEW_LOCAL_BIT_KHR = DEPENDENCY_VIEW_LOCAL_BIT,
        DEPENDENCY_DEVICE_GROUP_BIT_KHR = DEPENDENCY_DEVICE_GROUP_BIT,
        DEPENDENCY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    };
    typedef unsigned int RDependencyFlags;

    enum RBufferUsageFlagBits {
        BUFFER_USAGE_TRANSFER_SRC_BIT = 0x00000001,
        BUFFER_USAGE_TRANSFER_DST_BIT = 0x00000002,
        BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000004,
        BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 0x00000008,
        BUFFER_USAGE_UNIFORM_BUFFER_BIT = 0x00000010,
        BUFFER_USAGE_STORAGE_BUFFER_BIT = 0x00000020,
        BUFFER_USAGE_INDEX_BUFFER_BIT = 0x00000040,
        BUFFER_USAGE_VERTEX_BUFFER_BIT = 0x00000080,
        BUFFER_USAGE_INDIRECT_BUFFER_BIT = 0x00000100,
        BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 0x00020000,
        BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 0x00000800,
        BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 0x00001000,
        BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 0x00000200,
        BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 0x00080000,
        BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 0x00100000,
        BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = 0x00000400,
        BUFFER_USAGE_RAY_TRACING_BIT_NV = BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR,
        BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,
        BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,
        BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    };
    typedef unsigned int RBufferUsageFlags;

    enum RImageType {
        IMAGE_TYPE_1D = 0,
        IMAGE_TYPE_2D = 1,
        IMAGE_TYPE_3D = 2,
    };

    enum RSampleCountFlagBits {
        SAMPLE_COUNT_1_BIT = 0x00000001,
        SAMPLE_COUNT_2_BIT = 0x00000002,
        SAMPLE_COUNT_4_BIT = 0x00000004,
        SAMPLE_COUNT_8_BIT = 0x00000008,
        SAMPLE_COUNT_16_BIT = 0x00000010,
        SAMPLE_COUNT_32_BIT = 0x00000020,
        SAMPLE_COUNT_64_BIT = 0x00000040,
        SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    };
    typedef unsigned int RSampleCountFlags;

    enum RImageUsageFlagBits {
        IMAGE_USAGE_TRANSFER_SRC_BIT = 0x00000001,
        IMAGE_USAGE_TRANSFER_DST_BIT = 0x00000002,
        IMAGE_USAGE_SAMPLED_BIT = 0x00000004,
        IMAGE_USAGE_STORAGE_BIT = 0x00000008,
        IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 0x00000010,
        IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000020,
        IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 0x00000040,
        IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 0x00000080,
        IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 0x00000100,
        IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 0x00000200,
        IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV,
        IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    };
    typedef unsigned int RImageUsageFlags;

    enum RImageTiling {
        IMAGE_TILING_OPTIMAL = 0,
        IMAGE_TILING_LINEAR = 1,
        IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000,
        IMAGE_TILING_MAX_ENUM = 0x7FFFFFFF
    };

    enum RMemoryPropertyFlagBits {
        MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 0x00000001,
        MEMORY_PROPERTY_HOST_VISIBLE_BIT = 0x00000002,
        MEMORY_PROPERTY_HOST_COHERENT_BIT = 0x00000004,
        MEMORY_PROPERTY_HOST_CACHED_BIT = 0x00000008,
        MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 0x00000010,
        MEMORY_PROPERTY_PROTECTED_BIT = 0x00000020,
        MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 0x00000040,
        MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 0x00000080,
        MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV = 0x00000100,
        MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    };
    typedef unsigned int RMemoryPropertyFlags;

    enum RImageViewType {
        IMAGE_VIEW_TYPE_1D = 0,
        IMAGE_VIEW_TYPE_2D = 1,
        IMAGE_VIEW_TYPE_3D = 2,
        IMAGE_VIEW_TYPE_CUBE = 3,
        IMAGE_VIEW_TYPE_1D_ARRAY = 4,
        IMAGE_VIEW_TYPE_2D_ARRAY = 5,
        IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
        IMAGE_VIEW_TYPE_MAX_ENUM = 0x7FFFFFFF
    };

    enum RImageAspectFlagBits {
        IMAGE_ASPECT_COLOR_BIT = 0x00000001,
        IMAGE_ASPECT_DEPTH_BIT = 0x00000002,
        IMAGE_ASPECT_STENCIL_BIT = 0x00000004,
        IMAGE_ASPECT_METADATA_BIT = 0x00000008,
        IMAGE_ASPECT_PLANE_0_BIT = 0x00000010,
        IMAGE_ASPECT_PLANE_1_BIT = 0x00000020,
        IMAGE_ASPECT_PLANE_2_BIT = 0x00000040,
        IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 0x00000080,
        IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 0x00000100,
        IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 0x00000200,
        IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 0x00000400,
        IMAGE_ASPECT_PLANE_0_BIT_KHR = IMAGE_ASPECT_PLANE_0_BIT,
        IMAGE_ASPECT_PLANE_1_BIT_KHR = IMAGE_ASPECT_PLANE_1_BIT,
        IMAGE_ASPECT_PLANE_2_BIT_KHR = IMAGE_ASPECT_PLANE_2_BIT,
        IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    };
    typedef unsigned int RImageAspectFlags;

    enum RFilter
    {
        FILTER_NEAREST = 0,
        FILTER_LINEAR = 1,
        FILTER_CUBIC_IMG = 1000015000,
        FILTER_CUBIC_EXT = FILTER_CUBIC_IMG,
        FILTER_MAX_ENUM = 0x7FFFFFFF
    };

    enum RSamplerMipmapMode
    {
        SAMPLER_MIPMAP_MODE_NEAREST = 0,
        SAMPLER_MIPMAP_MODE_LINEAR = 1,
        SAMPLER_MIPMAP_MODE_MAX_ENUM = 0x7FFFFFFF
    };

    enum RSamplerAddressMode
    {
        SAMPLER_ADDRESS_MODE_REPEAT = 0,
        SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
        SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
        SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
        SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
        SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE,
        SAMPLER_ADDRESS_MODE_MAX_ENUM = 0x7FFFFFFF
    };

    enum RBorderColor
    {
        BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
        BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
        BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
        BORDER_COLOR_INT_OPAQUE_BLACK = 3,
        BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
        BORDER_COLOR_INT_OPAQUE_WHITE = 5,
        BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003,
        BORDER_COLOR_INT_CUSTOM_EXT = 1000287004,
        BORDER_COLOR_MAX_ENUM = 0x7FFFFFFF
    };

    enum RDescriptorType {
        DESCRIPTOR_TYPE_SAMPLER = 0,
        DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
        DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
        DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
        DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
        DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
        DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
        DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
        DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
        DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
        DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
        DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000,
        DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000,
        DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
        DESCRIPTOR_TYPE_MUTABLE_VALVE = 1000351000,
        DESCRIPTOR_TYPE_MAX_ENUM = 0x7FFFFFFF
    };

    enum RShaderStageFlagBits {
        SHADER_STAGE_VERTEX_BIT = 0x00000001,
        SHADER_STAGE_TESSELLATION_CONTROL_BIT = 0x00000002,
        SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0x00000004,
        SHADER_STAGE_GEOMETRY_BIT = 0x00000008,
        SHADER_STAGE_FRAGMENT_BIT = 0x00000010,
        SHADER_STAGE_COMPUTE_BIT = 0x00000020,
        SHADER_STAGE_ALL_GRAPHICS = 0x0000001F,
        SHADER_STAGE_ALL = 0x7FFFFFFF,
        SHADER_STAGE_RAYGEN_BIT_KHR = 0x00000100,
        SHADER_STAGE_ANY_HIT_BIT_KHR = 0x00000200,
        SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 0x00000400,
        SHADER_STAGE_MISS_BIT_KHR = 0x00000800,
        SHADER_STAGE_INTERSECTION_BIT_KHR = 0x00001000,
        SHADER_STAGE_CALLABLE_BIT_KHR = 0x00002000,
        SHADER_STAGE_TASK_BIT_NV = 0x00000040,
        SHADER_STAGE_MESH_BIT_NV = 0x00000080,
        SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI = 0x00004000,
        SHADER_STAGE_RAYGEN_BIT_NV = SHADER_STAGE_RAYGEN_BIT_KHR,
        SHADER_STAGE_ANY_HIT_BIT_NV = SHADER_STAGE_ANY_HIT_BIT_KHR,
        SHADER_STAGE_CLOSEST_HIT_BIT_NV = SHADER_STAGE_CLOSEST_HIT_BIT_KHR,
        SHADER_STAGE_MISS_BIT_NV = SHADER_STAGE_MISS_BIT_KHR,
        SHADER_STAGE_INTERSECTION_BIT_NV = SHADER_STAGE_INTERSECTION_BIT_KHR,
        SHADER_STAGE_CALLABLE_BIT_NV = SHADER_STAGE_CALLABLE_BIT_KHR,
        SHADER_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    };
    typedef unsigned int RShaderStageFlags;

    enum RClearValueType {
        CLEAR_VALUE_COLOR,
        CLEAR_VALUE_DEPTH_STENCIL,
        CLEAR_VALUE_NONE
    };

    enum RVertexInputRate {
        VERTEX_INPUT_RATE_VERTEX = 0,
        VERTEX_INPUT_RATE_INSTANCE = 1,
        VERTEX_INPUT_RATE_MAX_ENUM = 0x7FFFFFFF
    };

    enum RPrimitiveTopology {
        PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
        PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
        PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
        PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
        PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
        PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
        PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
        PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
        PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
        PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
        PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,
        PRIMITIVE_TOPOLOGY_MAX_ENUM = 0x7FFFFFFF
    };

    enum RPolygonMode {
        POLYGON_MODE_FILL = 0,
        POLYGON_MODE_LINE = 1,
        POLYGON_MODE_POINT = 2,
        POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000,
        POLYGON_MODE_MAX_ENUM = 0x7FFFFFFF
    };

    enum RCullModeFlagBits {
        CULL_MODE_NONE = 0,
        CULL_MODE_FRONT_BIT = 0x00000001,
        CULL_MODE_BACK_BIT = 0x00000002,
        CULL_MODE_FRONT_AND_BACK = 0x00000003,
        CULL_MODE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    };
    typedef unsigned int RCullModeFlags;

    typedef unsigned int RSampleMask;

    enum RCompareOp
    {
        COMPARE_OP_NEVER = 0,
        COMPARE_OP_LESS = 1,
        COMPARE_OP_EQUAL = 2,
        COMPARE_OP_LESS_OR_EQUAL = 3,
        COMPARE_OP_GREATER = 4,
        COMPARE_OP_NOT_EQUAL = 5,
        COMPARE_OP_GREATER_OR_EQUAL = 6,
        COMPARE_OP_ALWAYS = 7,
        COMPARE_OP_MAX_ENUM = 0x7FFFFFFF
    };

    enum RStencilOp {
        STENCIL_OP_KEEP = 0,
        STENCIL_OP_ZERO = 1,
        STENCIL_OP_REPLACE = 2,
        STENCIL_OP_INCREMENT_AND_CLAMP = 3,
        STENCIL_OP_DECREMENT_AND_CLAMP = 4,
        STENCIL_OP_INVERT = 5,
        STENCIL_OP_INCREMENT_AND_WRAP = 6,
        STENCIL_OP_DECREMENT_AND_WRAP = 7,
        STENCIL_OP_MAX_ENUM = 0x7FFFFFFF
    };

    enum RLogicOp {
        LOGIC_OP_CLEAR = 0,
        LOGIC_OP_AND = 1,
        LOGIC_OP_AND_REVERSE = 2,
        LOGIC_OP_COPY = 3,
        LOGIC_OP_AND_INVERTED = 4,
        LOGIC_OP_NO_OP = 5,
        LOGIC_OP_XOR = 6,
        LOGIC_OP_OR = 7,
        LOGIC_OP_NOR = 8,
        LOGIC_OP_EQUIVALENT = 9,
        LOGIC_OP_INVERT = 10,
        LOGIC_OP_OR_REVERSE = 11,
        LOGIC_OP_COPY_INVERTED = 12,
        LOGIC_OP_OR_INVERTED = 13,
        LOGIC_OP_NAND = 14,
        LOGIC_OP_SET = 15,
        LOGIC_OP_MAX_ENUM = 0x7FFFFFFF
    };

    enum RBlendFactor {
        BLEND_FACTOR_ZERO = 0,
        BLEND_FACTOR_ONE = 1,
        BLEND_FACTOR_SRC_COLOR = 2,
        BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
        BLEND_FACTOR_DST_COLOR = 4,
        BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
        BLEND_FACTOR_SRC_ALPHA = 6,
        BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
        BLEND_FACTOR_DST_ALPHA = 8,
        BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
        BLEND_FACTOR_CONSTANT_COLOR = 10,
        BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
        BLEND_FACTOR_CONSTANT_ALPHA = 12,
        BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
        BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
        BLEND_FACTOR_SRC1_COLOR = 15,
        BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
        BLEND_FACTOR_SRC1_ALPHA = 17,
        BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,
        BLEND_FACTOR_MAX_ENUM = 0x7FFFFFFF
    };

    enum RBlendOp {
        BLEND_OP_ADD = 0,
        BLEND_OP_SUBTRACT = 1,
        BLEND_OP_REVERSE_SUBTRACT = 2,
        BLEND_OP_MIN = 3,
        BLEND_OP_MAX = 4,
        BLEND_OP_ZERO_EXT = 1000148000,
        BLEND_OP_SRC_EXT = 1000148001,
        BLEND_OP_DST_EXT = 1000148002,
        BLEND_OP_SRC_OVER_EXT = 1000148003,
        BLEND_OP_DST_OVER_EXT = 1000148004,
        BLEND_OP_SRC_IN_EXT = 1000148005,
        BLEND_OP_DST_IN_EXT = 1000148006,
        BLEND_OP_SRC_OUT_EXT = 1000148007,
        BLEND_OP_DST_OUT_EXT = 1000148008,
        BLEND_OP_SRC_ATOP_EXT = 1000148009,
        BLEND_OP_DST_ATOP_EXT = 1000148010,
        BLEND_OP_XOR_EXT = 1000148011,
        BLEND_OP_MULTIPLY_EXT = 1000148012,
        BLEND_OP_SCREEN_EXT = 1000148013,
        BLEND_OP_OVERLAY_EXT = 1000148014,
        BLEND_OP_DARKEN_EXT = 1000148015,
        BLEND_OP_LIGHTEN_EXT = 1000148016,
        BLEND_OP_COLORDODGE_EXT = 1000148017,
        BLEND_OP_COLORBURN_EXT = 1000148018,
        BLEND_OP_HARDLIGHT_EXT = 1000148019,
        BLEND_OP_SOFTLIGHT_EXT = 1000148020,
        BLEND_OP_DIFFERENCE_EXT = 1000148021,
        BLEND_OP_EXCLUSION_EXT = 1000148022,
        BLEND_OP_INVERT_EXT = 1000148023,
        BLEND_OP_INVERT_RGB_EXT = 1000148024,
        BLEND_OP_LINEARDODGE_EXT = 1000148025,
        BLEND_OP_LINEARBURN_EXT = 1000148026,
        BLEND_OP_VIVIDLIGHT_EXT = 1000148027,
        BLEND_OP_LINEARLIGHT_EXT = 1000148028,
        BLEND_OP_PINLIGHT_EXT = 1000148029,
        BLEND_OP_HARDMIX_EXT = 1000148030,
        BLEND_OP_HSL_HUE_EXT = 1000148031,
        BLEND_OP_HSL_SATURATION_EXT = 1000148032,
        BLEND_OP_HSL_COLOR_EXT = 1000148033,
        BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034,
        BLEND_OP_PLUS_EXT = 1000148035,
        BLEND_OP_PLUS_CLAMPED_EXT = 1000148036,
        BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037,
        BLEND_OP_PLUS_DARKER_EXT = 1000148038,
        BLEND_OP_MINUS_EXT = 1000148039,
        BLEND_OP_MINUS_CLAMPED_EXT = 1000148040,
        BLEND_OP_CONTRAST_EXT = 1000148041,
        BLEND_OP_INVERT_OVG_EXT = 1000148042,
        BLEND_OP_RED_EXT = 1000148043,
        BLEND_OP_GREEN_EXT = 1000148044,
        BLEND_OP_BLUE_EXT = 1000148045,
        BLEND_OP_MAX_ENUM = 0x7FFFFFFF
    };

    enum RColorComponentFlagBits {
        COLOR_COMPONENT_R_BIT = 0x00000001,
        COLOR_COMPONENT_G_BIT = 0x00000002,
        COLOR_COMPONENT_B_BIT = 0x00000004,
        COLOR_COMPONENT_A_BIT = 0x00000008,
        COLOR_COMPONENT_ALL = COLOR_COMPONENT_R_BIT | COLOR_COMPONENT_G_BIT | COLOR_COMPONENT_B_BIT | COLOR_COMPONENT_A_BIT,
        COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    };
    typedef unsigned int RColorComponentFlags;

    enum RDynamicState {
        DYNAMIC_STATE_VIEWPORT = 0,
        DYNAMIC_STATE_SCISSOR = 1,
        DYNAMIC_STATE_LINE_WIDTH = 2,
        DYNAMIC_STATE_DEPTH_BIAS = 3,
        DYNAMIC_STATE_BLEND_CONSTANTS = 4,
        DYNAMIC_STATE_DEPTH_BOUNDS = 5,
        DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
        DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
        DYNAMIC_STATE_STENCIL_REFERENCE = 8,
        DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000,
        DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000,
        DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000,
        DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = 1000347000,
        DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004,
        DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006,
        DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001,
        DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = 1000226000,
        DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000,
        DYNAMIC_STATE_CULL_MODE_EXT = 1000267000,
        DYNAMIC_STATE_FRONT_FACE_EXT = 1000267001,
        DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = 1000267002,
        DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = 1000267003,
        DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = 1000267004,
        DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = 1000267005,
        DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = 1000267006,
        DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = 1000267007,
        DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = 1000267008,
        DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = 1000267009,
        DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = 1000267010,
        DYNAMIC_STATE_STENCIL_OP_EXT = 1000267011,
        DYNAMIC_STATE_VERTEX_INPUT_EXT = 1000352000,
        DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT = 1000377000,
        DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT = 1000377001,
        DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT = 1000377002,
        DYNAMIC_STATE_LOGIC_OP_EXT = 1000377003,
        DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT = 1000377004,
        DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT = 1000381000,
        DYNAMIC_STATE_MAX_ENUM = 0x7FFFFFFF
    };

    enum RPipelineType {
        PIPELINE_GRAPHICS = 0,
        PIPELINE_COMPUTE = 1,
        PIPELINE_RAY_TRACING = 1000165000
    };

#define SUBPASS_INTERNAL (~0u)
}